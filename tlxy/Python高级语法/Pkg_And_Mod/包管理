# 1.模块
- 一个模块就是一个包含Python代码的文件,后缀名称是.py就可以,模块就是个Python文件
- 为什么我们要用模块?
    - 程序太大,编写和维护非常不方便,需要拆分
    - 模块可以增加代码重复利用的方式
    - 当做命名空间使用,避免命名冲突
- 如何定义模块
    - 模块就是一个普通文件,所以任何代码可以直接书写
    - 不过根据模块的规范,最好在模块中编写以下内容
        - 函数(单一功能)
        - 类(相似功能的组合,或者类似业务模块)
        - 测试代码
- 如何使用模块
    - 模块直接导入
        - 假如模块名称直接以数字开头,须借助于importlib模块才可以实现导入
    - 语法一(例题见ex1,ex2)        
        - import module_name
        - module_name.function_name
        - module_name.class_name
    - import 模块 as 别名(例题见ex3)
        - 导入的同时给模块起一个别名
        - 其余用法于第一种相同
    - from module_name import function_name, class_name
        - 按上述方法有选择性的导入
        - 使用时可以直接使用导入的内容,不需要前缀
        - 例题见ex4
    - from module_name import *
        - 导入模块所有内容
        - 例题见ex5
- if __name__ == '__main__' 的使用
    - 可以有效避免模块代码被导入的时候被动执行的问题
    - 建议所有程序的入口都以此代码为入口
# 2.模块的搜索路径和存储
- 什么是模块的搜索路径
    - 加载模块的时候,系统会在那些地方搜索此模块
- 系统默认的模块搜索路径
    - import sys
    - sys.path 属性可以可以获取路径列表
    - 见例题ex6
- 添加搜索路径
    - sys.path.append(dir)
- 模块的加载顺序
    - 1.先搜索内存中已经加载好的
    - 2.搜索python的内置模块
    - 3.搜索sys.path路径

# 2.包
- 包是一种组织管理代码的方式,包里面存放的是模块
- 用于将模块包含在一起的文件夹就是包
- 自定义包的结构
    - |--包
    - |--|-- __init__.py 包的标志文件
    - |--|-- 模块1
    - |--|-- 模块2
    - |--|-- 子包(子文件夹)
    - |--|--|-- __init__.py 包的标志文件
    - |--|--|-- 子包模块1
    - |--|--|-- 子包模块2
- 包的导入操作
    - import package_name
        - 直接导入一个包,可以使用__init__.py中的内容
        - 使用方式是
            - package_name.func_name
            - package_name.class_name.func_name()
        - 例题见pkg1,ex7
    - import package_name as alias
        - 具体用法与作用方式,与模块一致
        - 需要注意的是此种方法是默认对__init__.py内容的导入
    - import package.module
        - 导入包中某一个具体的模块
        - 使用方法
            - package.module.func_name
            - package.module.class.func()
            - package.module.class.var
        - 例题见ex8
    - import package.module as alias
- frmo ... import 导入
    - from package import module1, module2, module2, ...
        - 此种导入方法不执行__init__的内容
            - from pkg1 import Package1
            - Package1.sayHello()
    - from package import *
        - 导入当前包__init__.py文件中所有的函数和类
        - 使用方法
            - func_name()
            - class_name.func_name()
            - class_name.var
        - 例题见ex9,注意此种导入的具体内容
    - from package.module import *
        - 导入包中指定模块的所有内容
- 在开发环境中经常会使用其他模块,可以在当前包中直接导入其他模块中的内容
    - import 完整的包或者模块的路径
- __all__的用法
    - 在使用from package import * 的时候, * 可以导入的内容
    - 在__init__.py中,如果文件为空,或者没有__all__,那么只可以把__init__中的内容导入
    - 而__init__如果设置了__all__的值,那么则按照__all__指定的子包或者模块进行加载,不会载入__init__中的内容
    - 用法__all__=['module1', 'module2', 'package1', ...]
# 3.命名空间
- 用于区分不同位置不同功能但相同名称的函数或者变量的一个特定前缀
- 作用是防止命名冲突